{"version":3,"sources":["components/Product.jsx","controllers/App.jsx","serviceWorker.js","index.js"],"names":["Product","id","priority","annual","onChanged","onDelete","className","onClick","type","onChange","e","currentTarget","value","App","state","products","resources","periods","resourceConsumption","fonds","mvp","productChanged","property","newValue","test","setState","slice","Number","deleteProduct","resourcesChanged","periodsChanged","getPlan","axios","post","resourceCount","periodsCount","headers","then","serverResponse","data","plan","report","renderPlan","colSpan","Array","fill","map","v","i","row","key","j","this","currentList","col","step","defaultValue","length","download","href","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af9a3ca0.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/Product.scss\";\n\nconst Product = ({ id, priority, annual, onChanged, onDelete }) => (\n  <div className=\"product\">\n    <div className=\"product-line\">\n      <p className=\"product-name\">{`Изделие № ${id + 1}`}</p>\n      <i className=\"fa fa-times\" onClick={() => onDelete(id)} />\n    </div>\n    <div className=\"product-body\">\n      <p className=\"product-line\">\n        <label className=\"body-label\">Годовой выпуск: </label>\n        <input\n          type=\"text\"\n          className=\"body-value\"\n          onChange={\n            onChanged && (e => onChanged(id, \"annual\", e.currentTarget.value))\n          }\n          value={annual}\n        />\n      </p>\n      <p className=\"product-line\">\n        <label className=\"body-label\">Приоритет: </label>\n        <input\n          type=\"text\"\n          className=\"body-value\"\n          onChange={\n            onChanged && (e => onChanged(id, \"priority\", e.currentTarget.value))\n          }\n          value={priority}\n        />\n      </p>\n    </div>\n  </div>\n);\n\nProduct.propTypes = {\n  id: PropTypes.number.isRequired,\n  priority: PropTypes.number.isRequired,\n  annual: PropTypes.number.isRequired,\n  onChanged: PropTypes.func\n};\n\nexport default Product;\n","import \"../styles/App.scss\";\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport Product from \"../components/Product\";\n\nclass App extends React.PureComponent {\n  state = {\n    products: [\n      { id: 0, annual: 45.0, priority: 1 },\n      { id: 1, annual: 40.0, priority: 2 }\n    ],\n    resources: 3,\n    periods: 2,\n    resourceConsumption: [\n      [2, 5, 5],\n      [4, 4, 2]\n    ],\n    fonds: [\n      [100, 200, 300],\n      [200, 300, 400]\n    ],\n    mvp: [\n      [2, 3],\n      [4, 5]\n    ]\n  };\n\n  productChanged = (id, property, newValue) => {\n    if (/^\\d+(\\.\\d+)*$/.test(newValue)) {\n      this.setState(state => ({\n        ...state,\n        products: [\n          ...state.products.slice(0, id),\n          {\n            ...state.products[id],\n            [property]: Number(newValue)\n          },\n          ...state.products.slice(id + 1)\n        ]\n      }));\n    }\n  };\n\n  deleteProduct = id =>\n    this.setState(state => ({\n      ...state,\n      products: [\n        ...state.products.slice(0, id),\n        ...state.products.slice(id + 1)\n      ]\n    }));\n\n  resourcesChanged = e => {\n    const newValue = Number(e.currentTarget.value);\n    if (newValue < 1) {\n      return this.setState({ resources: 1 });\n    }\n    this.setState({ resources: newValue });\n  };\n\n  periodsChanged = e => {\n    const newValue = Number(e.currentTarget.value);\n    if (newValue < 1) {\n      return this.setState({ periods: 1 });\n    }\n    this.setState({ periods: newValue });\n  };\n\n  getPlan = () => {\n    const {\n      products,\n      resources,\n      periods,\n      fonds,\n      resourceConsumption,\n      mvp\n    } = this.state;\n    axios\n      .post(\n        \"https://toau1.herokuapp.com/api\",\n        {\n          products,\n          resourceCount: resources,\n          periodsCount: periods,\n          fonds,\n          resourceConsumption,\n          mvp\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      )\n      .then(this.serverResponse);\n  };\n\n  serverResponse = ({ data }) => {\n    this.setState({\n      plan: data.products,\n      report: data.report\n    });\n  };\n\n  /**\n   * Вывести полученный календарный план\n   */\n  renderPlan = () => {\n    const { plan, periods } = this.state;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th />\n            <th colSpan={periods}>Период</th>\n          </tr>\n          <tr>\n            <th>Изделие</th>\n            {Array(periods).fill(0).map((v, i) => (\n              <th>{i + 1}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>{\n          plan.map((row, i) => (\n            <tr key={`plan-${i}`}>\n              <th>{i + 1}</th>\n              {\n                row.map((v, j) => <td key={`plan-${i}${j}`}>{v}</td>)\n              }\n            </tr>\n          ))\n        }</tbody>\n      </table>\n    );\n  };\n\n  render() {\n    const {\n      products,\n      resources,\n      currentList,\n      periods,\n      fonds,\n      resourceConsumption,\n      mvp,\n      plan\n    } = this.state;\n    return (\n      <div className=\"app\">\n        <div className=\"side-panel\">\n          <div className=\"block\">\n            <p className=\"block-header\">Количество ресурсов</p>\n            <input\n              type=\"number\"\n              className=\"block-input\"\n              onChange={this.resourcesChanged}\n              value={resources}\n            />\n          </div>\n          <div className=\"block\">\n            <p className=\"block-header\">Количество периодов</p>\n            <input\n              type=\"number\"\n              className=\"block-input\"\n              onChange={this.periodsChanged}\n              value={periods}\n            />\n          </div>\n          <div className=\"list\">\n            <h2 className=\"list-header\">Изделия</h2>\n            <div className={`wrapper wrapper-${currentList}`}>\n              {products.map(v => (\n                <Product\n                  key={`product-${v.id}`}\n                  onChanged={this.productChanged}\n                  onDelete={this.deleteProduct}\n                  {...v}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          <div className=\"table-wrapper\">\n            <h2 className=\"content-header\">\n              Затраты ресурсов на единицу продукции\n            </h2>\n            <table className=\"table table-consumption\">\n              <thead>\n                <tr>\n                  <th></th>\n                  <th colSpan={resources}>Ресурсы</th>\n                </tr>\n                <tr>\n                  <th colSpan={1}>Изделия</th>\n                  {Array(resources)\n                    .fill(0)\n                    .map((v, i) => (\n                      <th key={`consumption-header-${i}`}>{i + 1}</th>\n                    ))}\n                </tr>\n              </thead>\n              <tbody>\n                {resourceConsumption.map((row, i) => {\n                  return (\n                    <tr key={`consumption-row-${i}`}>\n                      <th>{i + 1}</th>\n                      {row.map((col, j) => (\n                        <td key={`consumption-col-${j}`}>\n                          <input\n                            className=\"table-input\"\n                            type=\"number\"\n                            step=\"1\"\n                            value={col}\n                            onChange={e =>\n                              this.setState({\n                                resourceConsumption: [\n                                  ...resourceConsumption.slice(0, i),\n                                  [\n                                    ...resourceConsumption[i].slice(0, j),\n                                    Number(e.currentTarget.value),\n                                    ...resourceConsumption[i].slice(j)\n                                  ],\n                                  ...resourceConsumption.slice(i + 1)\n                                ]\n                              })\n                            }\n                          />\n                        </td>\n                      ))}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"table-wrapper\">\n            <h2 className=\"content-header\">Фонды ресурсов</h2>\n            <table className=\"table table-fonds\">\n              <thead>\n                <tr>\n                  <th></th>\n                  <th colSpan={resources}>Ресурсы</th>\n                </tr>\n                <tr>\n                  <th>Период</th>\n                  {Array(resources)\n                    .fill(0)\n                    .map((v, i) => (\n                      <th key={`fonds-header-${i}`}>{i + 1}</th>\n                    ))}\n                </tr>\n              </thead>\n              <tbody>\n                {fonds.map((row, i) => (\n                  <tr key={`fonds-row-${i}`}>\n                    <th>{i + 1}</th>\n                    {row.map((col, j) => (\n                      <td key={`fonds-col-${j}`}>\n                        <input\n                          className=\"table-input\"\n                          type=\"number\"\n                          step=\"1\"\n                          defaultValue={col}\n                        />\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"table-wrapper\">\n            <h2 className=\"content-header\">\n              Минимально необходимые партии продукции\n            </h2>\n            <table className=\"table parties-table\">\n              <thead>\n                <tr>\n                  <th></th>\n                  <th colSpan={products.length}>Изделия</th>\n                </tr>\n                <tr>\n                  <th>Период</th>\n                  {products.map((v, i) => (\n                    <th key={`parties-header-${i}`}>{i + 1}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {mvp.map((row, i) => (\n                  <tr key={`parties-row-${i}`}>\n                    <th>{i + 1}</th>\n                    {row.map((col, j) => (\n                      <td key={`parties-col-${j}`}>\n                        <input\n                          type=\"number\"\n                          className=\"table-input\"\n                          defaultValue={col}\n                        />\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <button className=\"btn\" onClick={this.getPlan}>\n            Рассчитать\n          </button>\n        </div>\n\n        {plan ? (\n          <div className=\"side-panel\">\n            <h2>Календарный план</h2>\n            {this.renderPlan()}\n            <a download href={this.state.report}>Скачать отчет</a>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./controllers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}